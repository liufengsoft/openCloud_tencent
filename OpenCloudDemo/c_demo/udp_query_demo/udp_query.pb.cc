// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "udp_query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace url_open_query {

namespace {

const ::google::protobuf::Descriptor* UdpQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpQueryReq_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpQueryReq_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpQueryReq_ReqInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpQueryReq_ReqInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpQueryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpQueryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UdpQueryRsp_RspInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UdpQueryRsp_RspInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_udp_5fquery_2eproto() {
  protobuf_AddDesc_udp_5fquery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "udp_query.proto");
  GOOGLE_CHECK(file != NULL);
  UdpQueryReq_descriptor_ = file->message_type(0);
  static const int UdpQueryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq, reqinfo_),
  };
  UdpQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpQueryReq_descriptor_,
      UdpQueryReq::default_instance_,
      UdpQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpQueryReq));
  UdpQueryReq_Header_descriptor_ = UdpQueryReq_descriptor_->nested_type(0);
  static const int UdpQueryReq_Header_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, echostr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, ip_),
  };
  UdpQueryReq_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpQueryReq_Header_descriptor_,
      UdpQueryReq_Header::default_instance_,
      UdpQueryReq_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpQueryReq_Header));
  UdpQueryReq_ReqInfo_descriptor_ = UdpQueryReq_descriptor_->nested_type(1);
  static const int UdpQueryReq_ReqInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_ReqInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_ReqInfo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_ReqInfo, deviceid_),
  };
  UdpQueryReq_ReqInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpQueryReq_ReqInfo_descriptor_,
      UdpQueryReq_ReqInfo::default_instance_,
      UdpQueryReq_ReqInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_ReqInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryReq_ReqInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpQueryReq_ReqInfo));
  UdpQueryRsp_descriptor_ = file->message_type(1);
  static const int UdpQueryRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, echostr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, infos_),
  };
  UdpQueryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpQueryRsp_descriptor_,
      UdpQueryRsp::default_instance_,
      UdpQueryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpQueryRsp));
  UdpQueryRsp_RspInfo_descriptor_ = UdpQueryRsp_descriptor_->nested_type(0);
  static const int UdpQueryRsp_RspInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, urltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, eviltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, evilclass_),
  };
  UdpQueryRsp_RspInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UdpQueryRsp_RspInfo_descriptor_,
      UdpQueryRsp_RspInfo::default_instance_,
      UdpQueryRsp_RspInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UdpQueryRsp_RspInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UdpQueryRsp_RspInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_udp_5fquery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpQueryReq_descriptor_, &UdpQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpQueryReq_Header_descriptor_, &UdpQueryReq_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpQueryReq_ReqInfo_descriptor_, &UdpQueryReq_ReqInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpQueryRsp_descriptor_, &UdpQueryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UdpQueryRsp_RspInfo_descriptor_, &UdpQueryRsp_RspInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_udp_5fquery_2eproto() {
  delete UdpQueryReq::default_instance_;
  delete UdpQueryReq_reflection_;
  delete UdpQueryReq_Header::default_instance_;
  delete UdpQueryReq_Header_reflection_;
  delete UdpQueryReq_ReqInfo::default_instance_;
  delete UdpQueryReq_ReqInfo_reflection_;
  delete UdpQueryRsp::default_instance_;
  delete UdpQueryRsp_reflection_;
  delete UdpQueryRsp_RspInfo::default_instance_;
  delete UdpQueryRsp_RspInfo_reflection_;
}

void protobuf_AddDesc_udp_5fquery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017udp_query.proto\022\016url_open_query\"\345\001\n\013Ud"
    "pQueryReq\0222\n\006header\030\001 \002(\0132\".url_open_que"
    "ry.UdpQueryReq.Header\022\017\n\007reqinfo\030\002 \002(\014\032["
    "\n\006Header\022\r\n\005appid\030\001 \002(\r\022\014\n\004time\030\002 \002(\004\022\t\n"
    "\001v\030\003 \002(\014\022\017\n\007echostr\030\004 \002(\014\022\014\n\004sign\030\005 \002(\014\022"
    "\n\n\002ip\030\006 \001(\r\0324\n\007ReqInfo\022\n\n\002id\030\001 \002(\r\022\013\n\003ur"
    "l\030\002 \002(\014\022\020\n\010deviceid\030\003 \002(\014\"\311\001\n\013UdpQueryRs"
    "p\022\016\n\006status\030\001 \002(\r\022\013\n\003msg\030\002 \002(\014\022\017\n\007echost"
    "r\030\003 \002(\014\0222\n\005infos\030\004 \002(\0132#.url_open_query."
    "UdpQueryRsp.RspInfo\032X\n\007RspInfo\022\n\n\002id\030\001 \002"
    "(\r\022\013\n\003url\030\002 \002(\014\022\017\n\007urltype\030\003 \002(\r\022\020\n\010evil"
    "type\030\004 \002(\r\022\021\n\tevilclass\030\005 \001(\r", 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "udp_query.proto", &protobuf_RegisterTypes);
  UdpQueryReq::default_instance_ = new UdpQueryReq();
  UdpQueryReq_Header::default_instance_ = new UdpQueryReq_Header();
  UdpQueryReq_ReqInfo::default_instance_ = new UdpQueryReq_ReqInfo();
  UdpQueryRsp::default_instance_ = new UdpQueryRsp();
  UdpQueryRsp_RspInfo::default_instance_ = new UdpQueryRsp_RspInfo();
  UdpQueryReq::default_instance_->InitAsDefaultInstance();
  UdpQueryReq_Header::default_instance_->InitAsDefaultInstance();
  UdpQueryReq_ReqInfo::default_instance_->InitAsDefaultInstance();
  UdpQueryRsp::default_instance_->InitAsDefaultInstance();
  UdpQueryRsp_RspInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_udp_5fquery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_udp_5fquery_2eproto {
  StaticDescriptorInitializer_udp_5fquery_2eproto() {
    protobuf_AddDesc_udp_5fquery_2eproto();
  }
} static_descriptor_initializer_udp_5fquery_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UdpQueryReq_Header::kAppidFieldNumber;
const int UdpQueryReq_Header::kTimeFieldNumber;
const int UdpQueryReq_Header::kVFieldNumber;
const int UdpQueryReq_Header::kEchostrFieldNumber;
const int UdpQueryReq_Header::kSignFieldNumber;
const int UdpQueryReq_Header::kIpFieldNumber;
#endif  // !_MSC_VER

UdpQueryReq_Header::UdpQueryReq_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpQueryReq_Header::InitAsDefaultInstance() {
}

UdpQueryReq_Header::UdpQueryReq_Header(const UdpQueryReq_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpQueryReq_Header::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  v_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  echostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpQueryReq_Header::~UdpQueryReq_Header() {
  SharedDtor();
}

void UdpQueryReq_Header::SharedDtor() {
  if (v_ != &::google::protobuf::internal::kEmptyString) {
    delete v_;
  }
  if (echostr_ != &::google::protobuf::internal::kEmptyString) {
    delete echostr_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void UdpQueryReq_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpQueryReq_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpQueryReq_Header_descriptor_;
}

const UdpQueryReq_Header& UdpQueryReq_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udp_5fquery_2eproto();  return *default_instance_;
}

UdpQueryReq_Header* UdpQueryReq_Header::default_instance_ = NULL;

UdpQueryReq_Header* UdpQueryReq_Header::New() const {
  return new UdpQueryReq_Header;
}

void UdpQueryReq_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_v()) {
      if (v_ != &::google::protobuf::internal::kEmptyString) {
        v_->clear();
      }
    }
    if (has_echostr()) {
      if (echostr_ != &::google::protobuf::internal::kEmptyString) {
        echostr_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpQueryReq_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_v;
        break;
      }
      
      // required bytes v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_echostr;
        break;
      }
      
      // required bytes echostr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_echostr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echostr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }
      
      // required bytes sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ip;
        break;
      }
      
      // optional uint32 ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpQueryReq_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }
  
  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }
  
  // required bytes v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->v(), output);
  }
  
  // required bytes echostr = 4;
  if (has_echostr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->echostr(), output);
  }
  
  // required bytes sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sign(), output);
  }
  
  // optional uint32 ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpQueryReq_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }
  
  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }
  
  // required bytes v = 3;
  if (has_v()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->v(), target);
  }
  
  // required bytes echostr = 4;
  if (has_echostr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->echostr(), target);
  }
  
  // required bytes sign = 5;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign(), target);
  }
  
  // optional uint32 ip = 6;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpQueryReq_Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }
    
    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }
    
    // required bytes v = 3;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v());
    }
    
    // required bytes echostr = 4;
    if (has_echostr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echostr());
    }
    
    // required bytes sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }
    
    // optional uint32 ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpQueryReq_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpQueryReq_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpQueryReq_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpQueryReq_Header::MergeFrom(const UdpQueryReq_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_echostr()) {
      set_echostr(from.echostr());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpQueryReq_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpQueryReq_Header::CopyFrom(const UdpQueryReq_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpQueryReq_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void UdpQueryReq_Header::Swap(UdpQueryReq_Header* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(time_, other->time_);
    std::swap(v_, other->v_);
    std::swap(echostr_, other->echostr_);
    std::swap(sign_, other->sign_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpQueryReq_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpQueryReq_Header_descriptor_;
  metadata.reflection = UdpQueryReq_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UdpQueryReq_ReqInfo::kIdFieldNumber;
const int UdpQueryReq_ReqInfo::kUrlFieldNumber;
const int UdpQueryReq_ReqInfo::kDeviceidFieldNumber;
#endif  // !_MSC_VER

UdpQueryReq_ReqInfo::UdpQueryReq_ReqInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpQueryReq_ReqInfo::InitAsDefaultInstance() {
}

UdpQueryReq_ReqInfo::UdpQueryReq_ReqInfo(const UdpQueryReq_ReqInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpQueryReq_ReqInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpQueryReq_ReqInfo::~UdpQueryReq_ReqInfo() {
  SharedDtor();
}

void UdpQueryReq_ReqInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void UdpQueryReq_ReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpQueryReq_ReqInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpQueryReq_ReqInfo_descriptor_;
}

const UdpQueryReq_ReqInfo& UdpQueryReq_ReqInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udp_5fquery_2eproto();  return *default_instance_;
}

UdpQueryReq_ReqInfo* UdpQueryReq_ReqInfo::default_instance_ = NULL;

UdpQueryReq_ReqInfo* UdpQueryReq_ReqInfo::New() const {
  return new UdpQueryReq_ReqInfo;
}

void UdpQueryReq_ReqInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpQueryReq_ReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // required bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceid;
        break;
      }
      
      // required bytes deviceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deviceid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpQueryReq_ReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }
  
  // required bytes deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->deviceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpQueryReq_ReqInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }
  
  // required bytes deviceid = 3;
  if (has_deviceid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->deviceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpQueryReq_ReqInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }
    
    // required bytes deviceid = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deviceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpQueryReq_ReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpQueryReq_ReqInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpQueryReq_ReqInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpQueryReq_ReqInfo::MergeFrom(const UdpQueryReq_ReqInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpQueryReq_ReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpQueryReq_ReqInfo::CopyFrom(const UdpQueryReq_ReqInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpQueryReq_ReqInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UdpQueryReq_ReqInfo::Swap(UdpQueryReq_ReqInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpQueryReq_ReqInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpQueryReq_ReqInfo_descriptor_;
  metadata.reflection = UdpQueryReq_ReqInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UdpQueryReq::kHeaderFieldNumber;
const int UdpQueryReq::kReqinfoFieldNumber;
#endif  // !_MSC_VER

UdpQueryReq::UdpQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpQueryReq::InitAsDefaultInstance() {
  header_ = const_cast< ::url_open_query::UdpQueryReq_Header*>(&::url_open_query::UdpQueryReq_Header::default_instance());
}

UdpQueryReq::UdpQueryReq(const UdpQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpQueryReq::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  reqinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpQueryReq::~UdpQueryReq() {
  SharedDtor();
}

void UdpQueryReq::SharedDtor() {
  if (reqinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete reqinfo_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void UdpQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpQueryReq_descriptor_;
}

const UdpQueryReq& UdpQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udp_5fquery_2eproto();  return *default_instance_;
}

UdpQueryReq* UdpQueryReq::default_instance_ = NULL;

UdpQueryReq* UdpQueryReq::New() const {
  return new UdpQueryReq;
}

void UdpQueryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::url_open_query::UdpQueryReq_Header::Clear();
    }
    if (has_reqinfo()) {
      if (reqinfo_ != &::google::protobuf::internal::kEmptyString) {
        reqinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .url_open_query.UdpQueryReq.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reqinfo;
        break;
      }
      
      // required bytes reqinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reqinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reqinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .url_open_query.UdpQueryReq.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required bytes reqinfo = 2;
  if (has_reqinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->reqinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .url_open_query.UdpQueryReq.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required bytes reqinfo = 2;
  if (has_reqinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reqinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpQueryReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .url_open_query.UdpQueryReq.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required bytes reqinfo = 2;
    if (has_reqinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reqinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpQueryReq::MergeFrom(const UdpQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::url_open_query::UdpQueryReq_Header::MergeFrom(from.header());
    }
    if (from.has_reqinfo()) {
      set_reqinfo(from.reqinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpQueryReq::CopyFrom(const UdpQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void UdpQueryReq::Swap(UdpQueryReq* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(reqinfo_, other->reqinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpQueryReq_descriptor_;
  metadata.reflection = UdpQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UdpQueryRsp_RspInfo::kIdFieldNumber;
const int UdpQueryRsp_RspInfo::kUrlFieldNumber;
const int UdpQueryRsp_RspInfo::kUrltypeFieldNumber;
const int UdpQueryRsp_RspInfo::kEviltypeFieldNumber;
const int UdpQueryRsp_RspInfo::kEvilclassFieldNumber;
#endif  // !_MSC_VER

UdpQueryRsp_RspInfo::UdpQueryRsp_RspInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpQueryRsp_RspInfo::InitAsDefaultInstance() {
}

UdpQueryRsp_RspInfo::UdpQueryRsp_RspInfo(const UdpQueryRsp_RspInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpQueryRsp_RspInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  urltype_ = 0u;
  eviltype_ = 0u;
  evilclass_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpQueryRsp_RspInfo::~UdpQueryRsp_RspInfo() {
  SharedDtor();
}

void UdpQueryRsp_RspInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void UdpQueryRsp_RspInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpQueryRsp_RspInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpQueryRsp_RspInfo_descriptor_;
}

const UdpQueryRsp_RspInfo& UdpQueryRsp_RspInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udp_5fquery_2eproto();  return *default_instance_;
}

UdpQueryRsp_RspInfo* UdpQueryRsp_RspInfo::default_instance_ = NULL;

UdpQueryRsp_RspInfo* UdpQueryRsp_RspInfo::New() const {
  return new UdpQueryRsp_RspInfo;
}

void UdpQueryRsp_RspInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    urltype_ = 0u;
    eviltype_ = 0u;
    evilclass_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpQueryRsp_RspInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // required bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_urltype;
        break;
      }
      
      // required uint32 urltype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_urltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urltype_)));
          set_has_urltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eviltype;
        break;
      }
      
      // required uint32 eviltype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eviltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eviltype_)));
          set_has_eviltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evilclass;
        break;
      }
      
      // optional uint32 evilclass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evilclass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evilclass_)));
          set_has_evilclass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpQueryRsp_RspInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }
  
  // required uint32 urltype = 3;
  if (has_urltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->urltype(), output);
  }
  
  // required uint32 eviltype = 4;
  if (has_eviltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eviltype(), output);
  }
  
  // optional uint32 evilclass = 5;
  if (has_evilclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evilclass(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpQueryRsp_RspInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }
  
  // required uint32 urltype = 3;
  if (has_urltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->urltype(), target);
  }
  
  // required uint32 eviltype = 4;
  if (has_eviltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eviltype(), target);
  }
  
  // optional uint32 evilclass = 5;
  if (has_evilclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evilclass(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpQueryRsp_RspInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }
    
    // required uint32 urltype = 3;
    if (has_urltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urltype());
    }
    
    // required uint32 eviltype = 4;
    if (has_eviltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eviltype());
    }
    
    // optional uint32 evilclass = 5;
    if (has_evilclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evilclass());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpQueryRsp_RspInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpQueryRsp_RspInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpQueryRsp_RspInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpQueryRsp_RspInfo::MergeFrom(const UdpQueryRsp_RspInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_urltype()) {
      set_urltype(from.urltype());
    }
    if (from.has_eviltype()) {
      set_eviltype(from.eviltype());
    }
    if (from.has_evilclass()) {
      set_evilclass(from.evilclass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpQueryRsp_RspInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpQueryRsp_RspInfo::CopyFrom(const UdpQueryRsp_RspInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpQueryRsp_RspInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UdpQueryRsp_RspInfo::Swap(UdpQueryRsp_RspInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(urltype_, other->urltype_);
    std::swap(eviltype_, other->eviltype_);
    std::swap(evilclass_, other->evilclass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpQueryRsp_RspInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpQueryRsp_RspInfo_descriptor_;
  metadata.reflection = UdpQueryRsp_RspInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UdpQueryRsp::kStatusFieldNumber;
const int UdpQueryRsp::kMsgFieldNumber;
const int UdpQueryRsp::kEchostrFieldNumber;
const int UdpQueryRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

UdpQueryRsp::UdpQueryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UdpQueryRsp::InitAsDefaultInstance() {
  infos_ = const_cast< ::url_open_query::UdpQueryRsp_RspInfo*>(&::url_open_query::UdpQueryRsp_RspInfo::default_instance());
}

UdpQueryRsp::UdpQueryRsp(const UdpQueryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UdpQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  echostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UdpQueryRsp::~UdpQueryRsp() {
  SharedDtor();
}

void UdpQueryRsp::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (echostr_ != &::google::protobuf::internal::kEmptyString) {
    delete echostr_;
  }
  if (this != default_instance_) {
    delete infos_;
  }
}

void UdpQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UdpQueryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UdpQueryRsp_descriptor_;
}

const UdpQueryRsp& UdpQueryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_udp_5fquery_2eproto();  return *default_instance_;
}

UdpQueryRsp* UdpQueryRsp::default_instance_ = NULL;

UdpQueryRsp* UdpQueryRsp::New() const {
  return new UdpQueryRsp;
}

void UdpQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_echostr()) {
      if (echostr_ != &::google::protobuf::internal::kEmptyString) {
        echostr_->clear();
      }
    }
    if (has_infos()) {
      if (infos_ != NULL) infos_->::url_open_query::UdpQueryRsp_RspInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UdpQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required bytes msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_echostr;
        break;
      }
      
      // required bytes echostr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_echostr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_echostr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infos;
        break;
      }
      
      // required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UdpQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  // required bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg(), output);
  }
  
  // required bytes echostr = 3;
  if (has_echostr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->echostr(), output);
  }
  
  // required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->infos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UdpQueryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  // required bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }
  
  // required bytes echostr = 3;
  if (has_echostr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->echostr(), target);
  }
  
  // required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->infos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UdpQueryRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // required bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }
    
    // required bytes echostr = 3;
    if (has_echostr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->echostr());
    }
    
    // required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UdpQueryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UdpQueryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UdpQueryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UdpQueryRsp::MergeFrom(const UdpQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_echostr()) {
      set_echostr(from.echostr());
    }
    if (from.has_infos()) {
      mutable_infos()->::url_open_query::UdpQueryRsp_RspInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UdpQueryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UdpQueryRsp::CopyFrom(const UdpQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UdpQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_infos()) {
    if (!this->infos().IsInitialized()) return false;
  }
  return true;
}

void UdpQueryRsp::Swap(UdpQueryRsp* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(msg_, other->msg_);
    std::swap(echostr_, other->echostr_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UdpQueryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UdpQueryRsp_descriptor_;
  metadata.reflection = UdpQueryRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace url_open_query

// @@protoc_insertion_point(global_scope)
