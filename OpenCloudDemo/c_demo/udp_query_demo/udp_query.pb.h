// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: udp_query.proto

#ifndef PROTOBUF_udp_5fquery_2eproto__INCLUDED
#define PROTOBUF_udp_5fquery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace url_open_query {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_udp_5fquery_2eproto();
void protobuf_AssignDesc_udp_5fquery_2eproto();
void protobuf_ShutdownFile_udp_5fquery_2eproto();

class UdpQueryReq;
class UdpQueryReq_Header;
class UdpQueryReq_ReqInfo;
class UdpQueryRsp;
class UdpQueryRsp_RspInfo;

// ===================================================================

class UdpQueryReq_Header : public ::google::protobuf::Message {
 public:
  UdpQueryReq_Header();
  virtual ~UdpQueryReq_Header();
  
  UdpQueryReq_Header(const UdpQueryReq_Header& from);
  
  inline UdpQueryReq_Header& operator=(const UdpQueryReq_Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UdpQueryReq_Header& default_instance();
  
  void Swap(UdpQueryReq_Header* other);
  
  // implements Message ----------------------------------------------
  
  UdpQueryReq_Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UdpQueryReq_Header& from);
  void MergeFrom(const UdpQueryReq_Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);
  
  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);
  
  // required bytes v = 3;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 3;
  inline const ::std::string& v() const;
  inline void set_v(const ::std::string& value);
  inline void set_v(const char* value);
  inline void set_v(const void* value, size_t size);
  inline ::std::string* mutable_v();
  inline ::std::string* release_v();
  
  // required bytes echostr = 4;
  inline bool has_echostr() const;
  inline void clear_echostr();
  static const int kEchostrFieldNumber = 4;
  inline const ::std::string& echostr() const;
  inline void set_echostr(const ::std::string& value);
  inline void set_echostr(const char* value);
  inline void set_echostr(const void* value, size_t size);
  inline ::std::string* mutable_echostr();
  inline ::std::string* release_echostr();
  
  // required bytes sign = 5;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 5;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  
  // optional uint32 ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline ::google::protobuf::uint32 ip() const;
  inline void set_ip(::google::protobuf::uint32 value);
  
  // optional bytes ipv6 = 7;
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  static const int kIpv6FieldNumber = 7;
  inline const ::std::string& ipv6() const;
  inline void set_ipv6(const ::std::string& value);
  inline void set_ipv6(const char* value);
  inline void set_ipv6(const void* value, size_t size);
  inline ::std::string* mutable_ipv6();
  inline ::std::string* release_ipv6();
  
  // @@protoc_insertion_point(class_scope:url_open_query.UdpQueryReq.Header)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_echostr();
  inline void clear_has_echostr();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ipv6();
  inline void clear_has_ipv6();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 time_;
  ::std::string* v_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 ip_;
  ::std::string* echostr_;
  ::std::string* sign_;
  ::std::string* ipv6_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_5fquery_2eproto();
  friend void protobuf_AssignDesc_udp_5fquery_2eproto();
  friend void protobuf_ShutdownFile_udp_5fquery_2eproto();
  
  void InitAsDefaultInstance();
  static UdpQueryReq_Header* default_instance_;
};
// -------------------------------------------------------------------

class UdpQueryReq_ReqInfo : public ::google::protobuf::Message {
 public:
  UdpQueryReq_ReqInfo();
  virtual ~UdpQueryReq_ReqInfo();
  
  UdpQueryReq_ReqInfo(const UdpQueryReq_ReqInfo& from);
  
  inline UdpQueryReq_ReqInfo& operator=(const UdpQueryReq_ReqInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UdpQueryReq_ReqInfo& default_instance();
  
  void Swap(UdpQueryReq_ReqInfo* other);
  
  // implements Message ----------------------------------------------
  
  UdpQueryReq_ReqInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UdpQueryReq_ReqInfo& from);
  void MergeFrom(const UdpQueryReq_ReqInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required bytes deviceid = 3;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 3;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const void* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  
  // @@protoc_insertion_point(class_scope:url_open_query.UdpQueryReq.ReqInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  ::std::string* deviceid_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_5fquery_2eproto();
  friend void protobuf_AssignDesc_udp_5fquery_2eproto();
  friend void protobuf_ShutdownFile_udp_5fquery_2eproto();
  
  void InitAsDefaultInstance();
  static UdpQueryReq_ReqInfo* default_instance_;
};
// -------------------------------------------------------------------

class UdpQueryReq : public ::google::protobuf::Message {
 public:
  UdpQueryReq();
  virtual ~UdpQueryReq();
  
  UdpQueryReq(const UdpQueryReq& from);
  
  inline UdpQueryReq& operator=(const UdpQueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UdpQueryReq& default_instance();
  
  void Swap(UdpQueryReq* other);
  
  // implements Message ----------------------------------------------
  
  UdpQueryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UdpQueryReq& from);
  void MergeFrom(const UdpQueryReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UdpQueryReq_Header Header;
  typedef UdpQueryReq_ReqInfo ReqInfo;
  
  // accessors -------------------------------------------------------
  
  // required .url_open_query.UdpQueryReq.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::url_open_query::UdpQueryReq_Header& header() const;
  inline ::url_open_query::UdpQueryReq_Header* mutable_header();
  inline ::url_open_query::UdpQueryReq_Header* release_header();
  
  // required bytes reqinfo = 2;
  inline bool has_reqinfo() const;
  inline void clear_reqinfo();
  static const int kReqinfoFieldNumber = 2;
  inline const ::std::string& reqinfo() const;
  inline void set_reqinfo(const ::std::string& value);
  inline void set_reqinfo(const char* value);
  inline void set_reqinfo(const void* value, size_t size);
  inline ::std::string* mutable_reqinfo();
  inline ::std::string* release_reqinfo();
  
  // @@protoc_insertion_point(class_scope:url_open_query.UdpQueryReq)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_reqinfo();
  inline void clear_has_reqinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::url_open_query::UdpQueryReq_Header* header_;
  ::std::string* reqinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_5fquery_2eproto();
  friend void protobuf_AssignDesc_udp_5fquery_2eproto();
  friend void protobuf_ShutdownFile_udp_5fquery_2eproto();
  
  void InitAsDefaultInstance();
  static UdpQueryReq* default_instance_;
};
// -------------------------------------------------------------------

class UdpQueryRsp_RspInfo : public ::google::protobuf::Message {
 public:
  UdpQueryRsp_RspInfo();
  virtual ~UdpQueryRsp_RspInfo();
  
  UdpQueryRsp_RspInfo(const UdpQueryRsp_RspInfo& from);
  
  inline UdpQueryRsp_RspInfo& operator=(const UdpQueryRsp_RspInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UdpQueryRsp_RspInfo& default_instance();
  
  void Swap(UdpQueryRsp_RspInfo* other);
  
  // implements Message ----------------------------------------------
  
  UdpQueryRsp_RspInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UdpQueryRsp_RspInfo& from);
  void MergeFrom(const UdpQueryRsp_RspInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // required uint32 urltype = 3;
  inline bool has_urltype() const;
  inline void clear_urltype();
  static const int kUrltypeFieldNumber = 3;
  inline ::google::protobuf::uint32 urltype() const;
  inline void set_urltype(::google::protobuf::uint32 value);
  
  // required uint32 eviltype = 4;
  inline bool has_eviltype() const;
  inline void clear_eviltype();
  static const int kEviltypeFieldNumber = 4;
  inline ::google::protobuf::uint32 eviltype() const;
  inline void set_eviltype(::google::protobuf::uint32 value);
  
  // optional uint32 evilclass = 5;
  inline bool has_evilclass() const;
  inline void clear_evilclass();
  static const int kEvilclassFieldNumber = 5;
  inline ::google::protobuf::uint32 evilclass() const;
  inline void set_evilclass(::google::protobuf::uint32 value);
  
  // optional uint32 urlclass = 6;
  inline bool has_urlclass() const;
  inline void clear_urlclass();
  static const int kUrlclassFieldNumber = 6;
  inline ::google::protobuf::uint32 urlclass() const;
  inline void set_urlclass(::google::protobuf::uint32 value);
  
  // optional uint32 urlsubclass = 7;
  inline bool has_urlsubclass() const;
  inline void clear_urlsubclass();
  static const int kUrlsubclassFieldNumber = 7;
  inline ::google::protobuf::uint32 urlsubclass() const;
  inline void set_urlsubclass(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:url_open_query.UdpQueryRsp.RspInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_urltype();
  inline void clear_has_urltype();
  inline void set_has_eviltype();
  inline void clear_has_eviltype();
  inline void set_has_evilclass();
  inline void clear_has_evilclass();
  inline void set_has_urlclass();
  inline void clear_has_urlclass();
  inline void set_has_urlsubclass();
  inline void clear_has_urlsubclass();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 urltype_;
  ::google::protobuf::uint32 eviltype_;
  ::google::protobuf::uint32 evilclass_;
  ::google::protobuf::uint32 urlclass_;
  ::google::protobuf::uint32 urlsubclass_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_5fquery_2eproto();
  friend void protobuf_AssignDesc_udp_5fquery_2eproto();
  friend void protobuf_ShutdownFile_udp_5fquery_2eproto();
  
  void InitAsDefaultInstance();
  static UdpQueryRsp_RspInfo* default_instance_;
};
// -------------------------------------------------------------------

class UdpQueryRsp : public ::google::protobuf::Message {
 public:
  UdpQueryRsp();
  virtual ~UdpQueryRsp();
  
  UdpQueryRsp(const UdpQueryRsp& from);
  
  inline UdpQueryRsp& operator=(const UdpQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UdpQueryRsp& default_instance();
  
  void Swap(UdpQueryRsp* other);
  
  // implements Message ----------------------------------------------
  
  UdpQueryRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UdpQueryRsp& from);
  void MergeFrom(const UdpQueryRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UdpQueryRsp_RspInfo RspInfo;
  
  // accessors -------------------------------------------------------
  
  // required uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // required bytes echostr = 3;
  inline bool has_echostr() const;
  inline void clear_echostr();
  static const int kEchostrFieldNumber = 3;
  inline const ::std::string& echostr() const;
  inline void set_echostr(const ::std::string& value);
  inline void set_echostr(const char* value);
  inline void set_echostr(const void* value, size_t size);
  inline ::std::string* mutable_echostr();
  inline ::std::string* release_echostr();
  
  // required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::url_open_query::UdpQueryRsp_RspInfo& infos() const;
  inline ::url_open_query::UdpQueryRsp_RspInfo* mutable_infos();
  inline ::url_open_query::UdpQueryRsp_RspInfo* release_infos();
  
  // @@protoc_insertion_point(class_scope:url_open_query.UdpQueryRsp)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_echostr();
  inline void clear_has_echostr();
  inline void set_has_infos();
  inline void clear_has_infos();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  ::std::string* echostr_;
  ::url_open_query::UdpQueryRsp_RspInfo* infos_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_udp_5fquery_2eproto();
  friend void protobuf_AssignDesc_udp_5fquery_2eproto();
  friend void protobuf_ShutdownFile_udp_5fquery_2eproto();
  
  void InitAsDefaultInstance();
  static UdpQueryRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// UdpQueryReq_Header

// required uint32 appid = 1;
inline bool UdpQueryReq_Header::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UdpQueryReq_Header::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UdpQueryReq_Header::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UdpQueryReq_Header::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 UdpQueryReq_Header::appid() const {
  return appid_;
}
inline void UdpQueryReq_Header::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint64 time = 2;
inline bool UdpQueryReq_Header::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UdpQueryReq_Header::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UdpQueryReq_Header::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UdpQueryReq_Header::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 UdpQueryReq_Header::time() const {
  return time_;
}
inline void UdpQueryReq_Header::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// required bytes v = 3;
inline bool UdpQueryReq_Header::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UdpQueryReq_Header::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UdpQueryReq_Header::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UdpQueryReq_Header::clear_v() {
  if (v_ != &::google::protobuf::internal::kEmptyString) {
    v_->clear();
  }
  clear_has_v();
}
inline const ::std::string& UdpQueryReq_Header::v() const {
  return *v_;
}
inline void UdpQueryReq_Header::set_v(const ::std::string& value) {
  set_has_v();
  if (v_ == &::google::protobuf::internal::kEmptyString) {
    v_ = new ::std::string;
  }
  v_->assign(value);
}
inline void UdpQueryReq_Header::set_v(const char* value) {
  set_has_v();
  if (v_ == &::google::protobuf::internal::kEmptyString) {
    v_ = new ::std::string;
  }
  v_->assign(value);
}
inline void UdpQueryReq_Header::set_v(const void* value, size_t size) {
  set_has_v();
  if (v_ == &::google::protobuf::internal::kEmptyString) {
    v_ = new ::std::string;
  }
  v_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_Header::mutable_v() {
  set_has_v();
  if (v_ == &::google::protobuf::internal::kEmptyString) {
    v_ = new ::std::string;
  }
  return v_;
}
inline ::std::string* UdpQueryReq_Header::release_v() {
  clear_has_v();
  if (v_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = v_;
    v_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes echostr = 4;
inline bool UdpQueryReq_Header::has_echostr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UdpQueryReq_Header::set_has_echostr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UdpQueryReq_Header::clear_has_echostr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UdpQueryReq_Header::clear_echostr() {
  if (echostr_ != &::google::protobuf::internal::kEmptyString) {
    echostr_->clear();
  }
  clear_has_echostr();
}
inline const ::std::string& UdpQueryReq_Header::echostr() const {
  return *echostr_;
}
inline void UdpQueryReq_Header::set_echostr(const ::std::string& value) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(value);
}
inline void UdpQueryReq_Header::set_echostr(const char* value) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(value);
}
inline void UdpQueryReq_Header::set_echostr(const void* value, size_t size) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_Header::mutable_echostr() {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  return echostr_;
}
inline ::std::string* UdpQueryReq_Header::release_echostr() {
  clear_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = echostr_;
    echostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes sign = 5;
inline bool UdpQueryReq_Header::has_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UdpQueryReq_Header::set_has_sign() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UdpQueryReq_Header::clear_has_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UdpQueryReq_Header::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& UdpQueryReq_Header::sign() const {
  return *sign_;
}
inline void UdpQueryReq_Header::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void UdpQueryReq_Header::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void UdpQueryReq_Header::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_Header::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* UdpQueryReq_Header::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 ip = 6;
inline bool UdpQueryReq_Header::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UdpQueryReq_Header::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UdpQueryReq_Header::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UdpQueryReq_Header::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
inline ::google::protobuf::uint32 UdpQueryReq_Header::ip() const {
  return ip_;
}
inline void UdpQueryReq_Header::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
}

// optional bytes ipv6 = 7;
inline bool UdpQueryReq_Header::has_ipv6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UdpQueryReq_Header::set_has_ipv6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UdpQueryReq_Header::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UdpQueryReq_Header::clear_ipv6() {
  if (ipv6_ != &::google::protobuf::internal::kEmptyString) {
    ipv6_->clear();
  }
  clear_has_ipv6();
}
inline const ::std::string& UdpQueryReq_Header::ipv6() const {
  return *ipv6_;
}
inline void UdpQueryReq_Header::set_ipv6(const ::std::string& value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void UdpQueryReq_Header::set_ipv6(const char* value) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void UdpQueryReq_Header::set_ipv6(const void* value, size_t size) {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_Header::mutable_ipv6() {
  set_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    ipv6_ = new ::std::string;
  }
  return ipv6_;
}
inline ::std::string* UdpQueryReq_Header::release_ipv6() {
  clear_has_ipv6();
  if (ipv6_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipv6_;
    ipv6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UdpQueryReq_ReqInfo

// required uint32 id = 1;
inline bool UdpQueryReq_ReqInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UdpQueryReq_ReqInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UdpQueryReq_ReqInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UdpQueryReq_ReqInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UdpQueryReq_ReqInfo::id() const {
  return id_;
}
inline void UdpQueryReq_ReqInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required bytes url = 2;
inline bool UdpQueryReq_ReqInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UdpQueryReq_ReqInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UdpQueryReq_ReqInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UdpQueryReq_ReqInfo::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& UdpQueryReq_ReqInfo::url() const {
  return *url_;
}
inline void UdpQueryReq_ReqInfo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UdpQueryReq_ReqInfo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UdpQueryReq_ReqInfo::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_ReqInfo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* UdpQueryReq_ReqInfo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes deviceid = 3;
inline bool UdpQueryReq_ReqInfo::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UdpQueryReq_ReqInfo::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UdpQueryReq_ReqInfo::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UdpQueryReq_ReqInfo::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& UdpQueryReq_ReqInfo::deviceid() const {
  return *deviceid_;
}
inline void UdpQueryReq_ReqInfo::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void UdpQueryReq_ReqInfo::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void UdpQueryReq_ReqInfo::set_deviceid(const void* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq_ReqInfo::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* UdpQueryReq_ReqInfo::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UdpQueryReq

// required .url_open_query.UdpQueryReq.Header header = 1;
inline bool UdpQueryReq::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UdpQueryReq::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UdpQueryReq::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UdpQueryReq::clear_header() {
  if (header_ != NULL) header_->::url_open_query::UdpQueryReq_Header::Clear();
  clear_has_header();
}
inline const ::url_open_query::UdpQueryReq_Header& UdpQueryReq::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::url_open_query::UdpQueryReq_Header* UdpQueryReq::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::url_open_query::UdpQueryReq_Header;
  return header_;
}
inline ::url_open_query::UdpQueryReq_Header* UdpQueryReq::release_header() {
  clear_has_header();
  ::url_open_query::UdpQueryReq_Header* temp = header_;
  header_ = NULL;
  return temp;
}

// required bytes reqinfo = 2;
inline bool UdpQueryReq::has_reqinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UdpQueryReq::set_has_reqinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UdpQueryReq::clear_has_reqinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UdpQueryReq::clear_reqinfo() {
  if (reqinfo_ != &::google::protobuf::internal::kEmptyString) {
    reqinfo_->clear();
  }
  clear_has_reqinfo();
}
inline const ::std::string& UdpQueryReq::reqinfo() const {
  return *reqinfo_;
}
inline void UdpQueryReq::set_reqinfo(const ::std::string& value) {
  set_has_reqinfo();
  if (reqinfo_ == &::google::protobuf::internal::kEmptyString) {
    reqinfo_ = new ::std::string;
  }
  reqinfo_->assign(value);
}
inline void UdpQueryReq::set_reqinfo(const char* value) {
  set_has_reqinfo();
  if (reqinfo_ == &::google::protobuf::internal::kEmptyString) {
    reqinfo_ = new ::std::string;
  }
  reqinfo_->assign(value);
}
inline void UdpQueryReq::set_reqinfo(const void* value, size_t size) {
  set_has_reqinfo();
  if (reqinfo_ == &::google::protobuf::internal::kEmptyString) {
    reqinfo_ = new ::std::string;
  }
  reqinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryReq::mutable_reqinfo() {
  set_has_reqinfo();
  if (reqinfo_ == &::google::protobuf::internal::kEmptyString) {
    reqinfo_ = new ::std::string;
  }
  return reqinfo_;
}
inline ::std::string* UdpQueryReq::release_reqinfo() {
  clear_has_reqinfo();
  if (reqinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reqinfo_;
    reqinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UdpQueryRsp_RspInfo

// required uint32 id = 1;
inline bool UdpQueryRsp_RspInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UdpQueryRsp_RspInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UdpQueryRsp_RspInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::id() const {
  return id_;
}
inline void UdpQueryRsp_RspInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required bytes url = 2;
inline bool UdpQueryRsp_RspInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UdpQueryRsp_RspInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UdpQueryRsp_RspInfo::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& UdpQueryRsp_RspInfo::url() const {
  return *url_;
}
inline void UdpQueryRsp_RspInfo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UdpQueryRsp_RspInfo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UdpQueryRsp_RspInfo::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryRsp_RspInfo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* UdpQueryRsp_RspInfo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 urltype = 3;
inline bool UdpQueryRsp_RspInfo::has_urltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_urltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UdpQueryRsp_RspInfo::clear_has_urltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UdpQueryRsp_RspInfo::clear_urltype() {
  urltype_ = 0u;
  clear_has_urltype();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::urltype() const {
  return urltype_;
}
inline void UdpQueryRsp_RspInfo::set_urltype(::google::protobuf::uint32 value) {
  set_has_urltype();
  urltype_ = value;
}

// required uint32 eviltype = 4;
inline bool UdpQueryRsp_RspInfo::has_eviltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_eviltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UdpQueryRsp_RspInfo::clear_has_eviltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UdpQueryRsp_RspInfo::clear_eviltype() {
  eviltype_ = 0u;
  clear_has_eviltype();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::eviltype() const {
  return eviltype_;
}
inline void UdpQueryRsp_RspInfo::set_eviltype(::google::protobuf::uint32 value) {
  set_has_eviltype();
  eviltype_ = value;
}

// optional uint32 evilclass = 5;
inline bool UdpQueryRsp_RspInfo::has_evilclass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_evilclass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UdpQueryRsp_RspInfo::clear_has_evilclass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UdpQueryRsp_RspInfo::clear_evilclass() {
  evilclass_ = 0u;
  clear_has_evilclass();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::evilclass() const {
  return evilclass_;
}
inline void UdpQueryRsp_RspInfo::set_evilclass(::google::protobuf::uint32 value) {
  set_has_evilclass();
  evilclass_ = value;
}

// optional uint32 urlclass = 6;
inline bool UdpQueryRsp_RspInfo::has_urlclass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_urlclass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UdpQueryRsp_RspInfo::clear_has_urlclass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UdpQueryRsp_RspInfo::clear_urlclass() {
  urlclass_ = 0u;
  clear_has_urlclass();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::urlclass() const {
  return urlclass_;
}
inline void UdpQueryRsp_RspInfo::set_urlclass(::google::protobuf::uint32 value) {
  set_has_urlclass();
  urlclass_ = value;
}

// optional uint32 urlsubclass = 7;
inline bool UdpQueryRsp_RspInfo::has_urlsubclass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UdpQueryRsp_RspInfo::set_has_urlsubclass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UdpQueryRsp_RspInfo::clear_has_urlsubclass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UdpQueryRsp_RspInfo::clear_urlsubclass() {
  urlsubclass_ = 0u;
  clear_has_urlsubclass();
}
inline ::google::protobuf::uint32 UdpQueryRsp_RspInfo::urlsubclass() const {
  return urlsubclass_;
}
inline void UdpQueryRsp_RspInfo::set_urlsubclass(::google::protobuf::uint32 value) {
  set_has_urlsubclass();
  urlsubclass_ = value;
}

// -------------------------------------------------------------------

// UdpQueryRsp

// required uint32 status = 1;
inline bool UdpQueryRsp::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UdpQueryRsp::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UdpQueryRsp::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UdpQueryRsp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UdpQueryRsp::status() const {
  return status_;
}
inline void UdpQueryRsp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required bytes msg = 2;
inline bool UdpQueryRsp::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UdpQueryRsp::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UdpQueryRsp::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UdpQueryRsp::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& UdpQueryRsp::msg() const {
  return *msg_;
}
inline void UdpQueryRsp::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UdpQueryRsp::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void UdpQueryRsp::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryRsp::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* UdpQueryRsp::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes echostr = 3;
inline bool UdpQueryRsp::has_echostr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UdpQueryRsp::set_has_echostr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UdpQueryRsp::clear_has_echostr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UdpQueryRsp::clear_echostr() {
  if (echostr_ != &::google::protobuf::internal::kEmptyString) {
    echostr_->clear();
  }
  clear_has_echostr();
}
inline const ::std::string& UdpQueryRsp::echostr() const {
  return *echostr_;
}
inline void UdpQueryRsp::set_echostr(const ::std::string& value) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(value);
}
inline void UdpQueryRsp::set_echostr(const char* value) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(value);
}
inline void UdpQueryRsp::set_echostr(const void* value, size_t size) {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  echostr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UdpQueryRsp::mutable_echostr() {
  set_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    echostr_ = new ::std::string;
  }
  return echostr_;
}
inline ::std::string* UdpQueryRsp::release_echostr() {
  clear_has_echostr();
  if (echostr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = echostr_;
    echostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .url_open_query.UdpQueryRsp.RspInfo infos = 4;
inline bool UdpQueryRsp::has_infos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UdpQueryRsp::set_has_infos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UdpQueryRsp::clear_has_infos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UdpQueryRsp::clear_infos() {
  if (infos_ != NULL) infos_->::url_open_query::UdpQueryRsp_RspInfo::Clear();
  clear_has_infos();
}
inline const ::url_open_query::UdpQueryRsp_RspInfo& UdpQueryRsp::infos() const {
  return infos_ != NULL ? *infos_ : *default_instance_->infos_;
}
inline ::url_open_query::UdpQueryRsp_RspInfo* UdpQueryRsp::mutable_infos() {
  set_has_infos();
  if (infos_ == NULL) infos_ = new ::url_open_query::UdpQueryRsp_RspInfo;
  return infos_;
}
inline ::url_open_query::UdpQueryRsp_RspInfo* UdpQueryRsp::release_infos() {
  clear_has_infos();
  ::url_open_query::UdpQueryRsp_RspInfo* temp = infos_;
  infos_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace url_open_query

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_udp_5fquery_2eproto__INCLUDED
